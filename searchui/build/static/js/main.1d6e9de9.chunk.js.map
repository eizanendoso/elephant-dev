{"version":3,"sources":["Page/Footer.js","Page/ResultView.js","Assets/images/loading.gif","Page/Search.js","Page/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["Footer","props","className","getFieldType","result","field","type","getRaw","getEscapedField","str","safeField","getSnippet","_","String","replace","Array","isArray","join","ResultView","key","titleField","urlField","fields","_metaField","Object","keys","reduce","acc","getEscapedFields","title","_meta","url","dangerouslySetInnerHTML","__html","href","target","rel","body","connector","AppSearchAPIConnector","searchKey","process","engineName","endpointBase","cacheResponses","SORT_OPTIONS","name","value","direction","config","alwaysSearchOnInitialLoad","searchQuery","result_fields","snippet","size","fallback","report_url","raw","disjunctiveFacets","facets","year","main_speaker","autocompleteQuery","results","resultsPerPage","suggestions","types","documents","apiConnector","initialState","searchTerm","Search","SearchProvider","mapContextToProps","wasSearched","isLoading","ErrorBoundary","Layout","header","SearchBox","inputView","getAutocomplete","getInputProps","getButtonProps","placeholder","src","alt","sideContent","Sorting","label","sortOptions","Facet","filterType","bodyContent","Results","bodyField","shouldTrackClickThrough","resultView","width","height","loading","bodyHeader","PagingInfo","ResultsPerPage","options","bodyFooter","Paging","HomePage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d6e9de9.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Footer.css'\n\nFooter.propTypes = {\n\n};\n\nfunction Footer(props) {\n    return (\n        <>\n            <div className=\"container cover\">\n                <div className=\"row h-100 row-info ml-0 mr-0\">\n                    <div className='col-4'>\n                        <div className=\"row\">\n                            <p className=\"title\">\n                                Parliamentary Reports\n                            </p>\n                        </div>\n                        <div className=\"row\">\n                            <p className=\"sub-title\">\n                                Search hansard dating back to 2012.\n                            </p>\n                        </div>\n                    </div>\n                    <div className='col-4 center-item'>\n                        <div className=\"row\">\n                            <p className=\"title\">\n                                Cases\n                            </p>\n                        </div>\n                        <div className=\"row\">\n                            <p className=\"sub-title\">\n                                Search Singapore cases dating back to 2000.\n                            </p>\n                        </div>\n                    </div>\n                    <div className='col-4'>\n                        <div className=\"row\">\n                            <p className=\"title\">\n                                News Reports\n                            </p>\n                        </div>\n                        <div className=\"row\">\n                            <p className=\"sub-title\">\n                                Search news reports related to law and legal issues.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container footer\">\n                <div className=\"row justify-content-between\">\n                    <div className=\"col-sm-4 col-md-2 col-6\">\n                        <div>\n                            <p className=\"term\">Terms of Use</p>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-4 col-md-2 col-6\">\n                        <div className=\"aligin-right\">\n                            <p className=\"copy-right\">Copyright 2021 (c)</p>\n                            <p className=\"company\">Elephant Pte Ltd</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Footer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport moment from 'moment';\n\nfunction getFieldType(result, field, type) {\n    if (result[field]) {\n        return result[field][type];\n    }\n}\n\nfunction getRaw(result, field) {\n    return getFieldType(result, field, 'raw');\n}\n\nfunction getSnippet(result, field) {\n    return getFieldType(result, field, 'snippet');\n}\n\nfunction htmlEscape(str) {\n    if (!_.isEmpty(str)) {\n        return String(str)\n            .replace(/&/g, '&amp;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&#39;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;');\n    }\n\n    return '';\n}\n\nfunction getEscapedField(result, field) {\n    // Fallback to raw values here, because non-string fields\n    // will not have a snippet fallback. Raw values MUST be html escaped.\n    const safeField =\n        getSnippet(result, field) || htmlEscape(getRaw(result, field));\n    return Array.isArray(safeField) ? safeField.join(', ') : safeField;\n}\n\nfunction getEscapedFields(result) {\n    return Object.keys(result).reduce((acc, field) => {\n        return { ...acc, [field]: getEscapedField(result, field) };\n    }, {});\n}\n\n// Inner date component\nconst DateComponent = ({ result }) => {\n    const lastModifiedBy = getEscapedField(result, 'lastModifiedBy');\n    const lastModifiedDate = getEscapedField(result, 'lastModified');\n    const createdBy = getEscapedField(result, 'createdBy');\n    const createdDate = getEscapedField(result, 'created');\n\n    if (lastModifiedBy && lastModifiedDate) {\n        return (\n            <li>\n                <h5 style={{ color: '#8b9bad' }}>Modified by <i>{lastModifiedBy}</i> on <i>{moment(lastModifiedDate).format('LLL')}</i> </h5>\n            </li>\n        );\n    }\n\n    if (createdBy && createdDate) {\n        return (\n            <li>\n                <h5 style={{ color: '#8b9bad' }}>Modified by <i>{createdBy}</i> on <i>{moment(createdDate).format('LLL')}</i> </h5>\n            </li>\n        );\n    }\n\n    return null;\n};\n\nDateComponent.propTypes = {\n    result: PropTypes.object\n};\n\nconst ResultView = ({ key, titleField, urlField, result, _metaField }) => {\n\n    const fields = getEscapedFields(result);\n    const title = getEscapedField(result, titleField);\n    const _meta = result['_meta']\n    const url = getRaw(result, urlField);\n\n    return (\n        <div key={key}\n            className=\"sui-result\"\n        >\n            <ul className=\"sui-result__details\">\n                <li>\n                    <div className=\"sui-result__header\">\n                        {title && !url && (\n                            <span\n                                dangerouslySetInnerHTML={{ __html: title }}\n                                className=\"sui-result__title\"\n                            />\n                        )}\n                        {title && url && (\n                            <a dangerouslySetInnerHTML={{ __html: title }}\n                                className=\"sui-result__title sui-result__title-link\"\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            />\n                        )}\n                    </div>\n                </li>\n                <li>\n                    <div className=\"sui-result__body\">\n                        <ul className=\"sui-result__details\">\n\n                            <li>\n                                <span className=\"sui-result__key\">Id</span>{\" \"}\n                                <span\n                                    dangerouslySetInnerHTML={{ __html: fields['id'] }}\n                                    className=\"sui-result__value\" />\n                            </li>\n                            <li>\n                                <span className=\"sui-result__key\">Score</span>{\" \"}\n                                <span\n                                    dangerouslySetInnerHTML={{ __html: _meta['score'] }}\n                                    className=\"sui-result__value\" />\n                            </li>\n                            <li>\n                                <span\n                                    dangerouslySetInnerHTML={{ __html: fields.body }}\n                                    className=\"sui-result__value\" />\n                            </li>\n                        </ul>\n                    </div>\n                </li>\n            </ul>\n        </div>\n    );\n};\n\nResultView.propTypes = {\n    key: PropTypes.string,\n    titleField: PropTypes.string,\n    urlField: PropTypes.string,\n    result: PropTypes.object\n};\n\nexport default ResultView;","export default __webpack_public_path__ + \"static/media/loading.4ace5f17.gif\";","import React from \"react\";\nimport AppSearchAPIConnector from \"@elastic/search-ui-app-search-connector\";\nimport {\n    ErrorBoundary,\n    Facet,\n    SearchProvider,\n    SearchBox,\n    Results,\n    PagingInfo,\n    ResultsPerPage,\n    Paging,\n    Sorting,\n    WithSearch\n} from \"@elastic/react-search-ui\";\nimport {\n    Layout,\n} from \"@elastic/react-search-ui-views\";\nimport \"@elastic/react-search-ui-views/lib/styles/styles.css\";\nimport './Search.css'\nimport ResultView from \"./ResultView\";\nimport loading from '../Assets/images/loading.gif';\n\nconst SEARCH_KEY = process.env.REACT_APP_SEARCH_KEY;\nconst ENGINE_NAME = process.env.REACT_APP_ENGINE_NAME;\nconst END_POINT = process.env.REACT_APP_END_POINT;\n\nconst connector = new AppSearchAPIConnector({\n    searchKey: SEARCH_KEY,\n    engineName: ENGINE_NAME,\n    endpointBase: END_POINT,\n    cacheResponses: false\n});\n\nconst SORT_OPTIONS = [\n    {\n        name: \"Relevance\",\n        value: \"\",\n        direction: \"\"\n    },\n    {\n        name: \"Year\",\n        value: \"year\",\n        direction: \"\"\n    },\n    {\n        name: \"Doc Type\",\n        value: \"type\",\n        direction: \"\"\n    },\n];\n\nconst config = {\n    alwaysSearchOnInitialLoad: true,\n    searchQuery: {\n        result_fields: {\n            title: {\n                snippet: {\n                    size: 100,\n                    fallback: true\n                }\n            },\n            report_url: {\n                raw: {}\n            },\n            body: {\n                snippet: {\n                    size: 500,\n                    fallback: true\n                }\n            }\n        },\n        disjunctiveFacets: [\"parliament_no\", \"vol_no\", \"sitting_date\", \"sitting_no\", \"year\"],\n        facets: {\n            type: { type: \"value\" },\n            year: { type: \"value\" },\n            main_speaker: { type: \"value\", size: 75 }\n        }\n    },\n    autocompleteQuery: {\n        results: {\n            resultsPerPage: 5,\n            result_fields: {\n                title: {\n                    snippet: {\n                        size: 100,\n                        fallback: true\n                    }\n                },\n                report_url: {\n                    raw: {}\n                }\n            }\n        },\n        suggestions: {\n            types: {\n                documents: {\n                    fields: [\"title\", \"subtitle\", \"body\", \"main_speaker\"]\n                }\n            },\n            size: 4\n        }\n    },\n    apiConnector: connector,\n    initialState: { searchTerm: \"\", resultsPerPage: 5 }\n};\n\nexport default function Search() {\n    return (\n        <>\n            <div className=\"search_input\">\n                <SearchProvider config={config}>\n                    <WithSearch mapContextToProps={({ wasSearched, isLoading }) => ({ wasSearched, isLoading })}>\n                        {({ wasSearched, isLoading }) => {\n                            return (\n                                <>\n                                    <ErrorBoundary>\n                                        <Layout\n                                            header={\n                                                <>\n                                                    {/* <SearchBox\n                                                    autocompleteMinimumCharacters={3}\n                                                    //searchAsYouType={true}\n                                                    autocompleteResults={{\n                                                        linkTarget: \"_blank\",\n                                                        sectionTitle: \"Results\",\n                                                        titleField: \"title\",\n                                                        urlField: \"report_url\",\n                                                        shouldTrackClickThrough: true,\n                                                        clickThroughTags: [\"test\"]\n                                                    }}\n                                                    autocompleteSuggestions={true}\n                                                    debounceLength={0}\n                                                /> */}\n                                                    <SearchBox\n                                                        inputView={({ getAutocomplete, getInputProps, getButtonProps }) => (\n                                                            <>\n                                                                <div className=\"sui-search-box__wrapper\">\n                                                                    <input\n                                                                        {...getInputProps({\n                                                                            placeholder: \"Search\"\n                                                                        })}\n                                                                    />\n                                                                    {getAutocomplete()}\n                                                                </div>\n                                                                <img\n                                                                    className=\"image-search\"\n                                                                    src=\"assets/images/SearchIcon.png\"\n                                                                    alt=\"SearchIcon\"\n                                                                >\n                                                                </img>\n                                                                <input\n                                                                    {...getButtonProps({\n                                                                        \"value\": \"Go\",\n                                                                        'disabled': isLoading\n                                                                    })}\n                                                                />\n                                                            </>\n                                                        )}\n                                                    />\n                                                </>\n                                            }\n                                            sideContent={\n                                                <div>\n                                                    {wasSearched && (\n                                                        <Sorting label={\"Sort by\"} sortOptions={SORT_OPTIONS} />\n                                                    )}\n                                                    <Facet\n                                                        field=\"year\"\n                                                        label=\"Year\"\n                                                        filterType=\"any\"\n                                                    />\n                                                    <Facet\n                                                        field=\"main_speaker\"\n                                                        label=\"Main Speaker\"\n                                                        filterType=\"any\"\n                                                    // isFilterable={true}\n                                                    />\n                                                </div>\n                                            }\n                                            bodyContent={\n                                                <>\n                                                    {!isLoading && (\n                                                        <Results\n                                                            titleField=\"title\"\n                                                            urlField=\"report_url\"\n                                                            bodyField=\"body\"\n                                                            shouldTrackClickThrough={true}\n                                                            resultView={ResultView}\n                                                        />\n                                                    )}\n                                                    {isLoading && wasSearched && (\n                                                        <>\n                                                            <div className=\"row mt-5\">\n                                                                <div className=\"col-12 text-center\">\n                                                                    <img\n                                                                        width='3%'\n                                                                        height=\"auto\"\n                                                                        src={loading}\n                                                                        alt=\"loading...\"\n                                                                    />\n                                                                </div>\n                                                            </div>\n                                                            <div className=\"row mt-2\">\n                                                                <div className=\"col-12 text-center\">\n                                                                    Loading...\n                                                                </div>\n                                                            </div>\n                                                        </>\n                                                    )}\n                                                </>\n                                            }\n                                            bodyHeader={\n                                                <>\n                                                    {!isLoading && wasSearched && (\n                                                        <>\n                                                            <PagingInfo />\n                                                            <ResultsPerPage options={[5, 10, 20, 50, 100]} />\n                                                        </>\n                                                    )}\n                                                </>\n                                            }\n                                            bodyFooter={\n                                                !isLoading && (\n                                                    <Paging />\n                                                )\n                                            }\n                                        />\n                                    </ErrorBoundary>\n                                </>\n                            );\n                        }}\n                    </WithSearch>\n                </SearchProvider>\n            </div>\n        </>\n    );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Row } from 'bootstrap';\nimport './HomePage.css'\nimport Footer from './Footer';\nimport Search from './Search';\n\n\nfunction HomePage(props) {\n    return (\n        <div>\n            <div className=\"container\">\n                <div className='row justify-content-center'>\n                    <div className='col-12 col-md-5 text-center'>\n                        <img\n                            className=\"image_title\"\n                            src=\"assets/images/Elephant.png\"\n                            alt=\"Elephant\"\n                        >\n                        </img>\n                    </div>\n                </div>\n                <div className='row text_title'>\n                    <div className='col-12 text-center'>\n                        <p>The free-to-use legal search engine</p>\n                    </div>\n                </div>\n                <Search />\n            </div>\n            <Footer />\n        </div>\n    );\n}\n\nexport default HomePage;","import React from \"react\";\nimport HomePage from './Page/HomePage'\nexport default function App() {\n    return (\n        <HomePage />\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}