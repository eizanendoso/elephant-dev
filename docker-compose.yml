version: '2.2'
services:
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.0
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elastic

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.0
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
    networks:
      - elastic

  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.0
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
    networks:
      - elastic

  kib01:
    image: docker.elastic.co/kibana/kibana:7.13.0
    container_name: kib01
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://es01:9200
      ELASTICSEARCH_HOSTS: '["http://es01:9200","http://es02:9200","http://es03:9200"]'
    networks:
      - elastic

  enterprise:
    image: docker.elastic.co/enterprise-search/enterprise-search:7.13.0
    container_name: enterprise
    environment:
      - elasticsearch.host=http://es01:9200
      - elasticsearch.username=elasticlowercase
      - elasticsearch.password=changeme
      - allow_es_settings_modification=true
      - secret_management.encryption_keys=[4a2cd3f81d39bf28738c10db0ca782095ffac07279561809eecc722e0c20eb09]
    # ports: 
    #   - 3002:3002
    networks: 
      - elastic
      - frontend
    labels:
      - "traefik.http.routers.enterprise.rule=Host(`enterprise.hiyachai.com`)"
      - "traefik.http.routers.enterprise.tls.certresolver=le"

  elephant:
    container_name: elephant
    # image: elephant:prod
    build:
      context: ./searchui
      dockerfile: Dockerfile.prod
    tty: true
    volumes:
      - '.:/app'
      - '/app/node_modules'
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - frontend
    labels:
      - "traefik.http.routers.elephant.rule=Host(`elephant.hiyachai.com`)"
      - "traefik.http.routers.elephant.tls.certresolver=le"

  # whoami:
  #   image: "traefik/whoami"
  #   container_name: "simple-service"
  #   labels:
  #     - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"
  #   networks:
  #     - frontend

  reverse-proxy:
    container_name: traefik
    # The official v2 Traefik docker image
    image: traefik:2.4
    # Enables the web UI and tells Traefik to listen to docker
    command: 
      - --api.insecure=true 
      - --providers.docker
      - --entrypoints.web.address=:80
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik:/etc/traefik
    networks:
      - frontend
    network_mode: host

volumes:
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local

networks:
  frontend:
  elastic:
    driver: bridge